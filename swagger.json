{
    "definitions": {},
    "info": {
      "description": "API endpoints with authentication",
      "title": "API Documentation",
      "version": "1.0.0"
    },
    "paths": {
      "/admin/balance": {
        "put": {
          "description": "<br/>The endpoint will update the user balance for the current Calendar Period only. If the user balance needs to updated permanently then it is recommended to update the user's balance via the admin PUT user endpoint.<br/>",
          "parameters": [
            {
              "description": "Admin API Key for authentication",
              "in": "header",
              "name": "API-Key",
              "required": true,
              "type": "string"
            },
            {
              "description": "Valid token for verification",
              "in": "query",
              "name": "token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "new_balance": {
                    "description": "New balance value",
                    "type": "integer"
                  },
                  "user_id": {
                    "description": "ID of user to update",
                    "type": "string"
                  }
                },
                "required": [
                  "user_id",
                  "new_balance"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Balance updated successfully"
            },
            "401": {
              "description": "Authentication error"
            },
            "403": {
              "description": "Forbidden - not an admin"
            },
            "500": {
              "description": "Server error"
            }
          },
          "summary": "Update user's API call balance for the current Calendar Period (Admin only). ",
          "tags": [
            "Admin Functions"
          ]
        }
      },
      "/admin/endpoint": {
        "post": {
          "parameters": [
            {
              "description": "Admin API Key for authentication",
              "in": "header",
              "name": "API-Key",
              "required": true,
              "type": "string"
            },
            {
              "description": "A valid token for verification",
              "in": "query",
              "name": "token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "active": {
                    "description": "Whether the endpoint is active (default: true)",
                    "type": "boolean"
                  },
                  "cost": {
                    "description": "Cost in balance units for each call to this endpoint (default: 1.0, can be 0 or fractional values like 0.5)",
                    "format": "float",
                    "type": "number"
                  },
                  "description": {
                    "description": "Optional description of the endpoint",
                    "type": "string"
                  },
                  "endpoint_name": {
                    "description": "A user-friendly name for the endpoint",
                    "type": "string"
                  },
                  "endpoint_path": {
                    "description": "The API endpoint path (e.g., /llm/custom)",
                    "type": "string"
                  }
                },
                "required": [
                  "endpoint_path",
                  "endpoint_name"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "201": {
              "description": "Endpoint created successfully"
            },
            "400": {
              "description": "Bad request"
            },
            "401": {
              "description": "Authentication error"
            },
            "403": {
              "description": "Forbidden - not an admin"
            },
            "409": {
              "description": "Conflict - endpoint already exists"
            },
            "500": {
              "description": "Server error"
            }
          },
          "summary": "Add a new endpoint to the endpoints table (Admin only endpoint)",
          "tags": [
            "Admin Functions"
          ]
        },
        "put": {
          "parameters": [
            {
              "description": "Admin API Key for authentication",
              "in": "header",
              "name": "API-Key",
              "required": true,
              "type": "string"
            },
            {
              "description": "A valid token for verification",
              "in": "query",
              "name": "token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "active": {
                    "description": "New active status (optional)",
                    "type": "boolean"
                  },
                  "cost": {
                    "description": "New cost in balance units for each call (optional)",
                    "type": "integer"
                  },
                  "description": {
                    "description": "New description (optional)",
                    "type": "string"
                  },
                  "endpoint_id": {
                    "description": "ID of the endpoint to update",
                    "type": "string"
                  },
                  "endpoint_name": {
                    "description": "New user-friendly name (optional)",
                    "type": "string"
                  },
                  "endpoint_path": {
                    "description": "New API endpoint path (optional)",
                    "type": "string"
                  }
                },
                "required": [
                  "endpoint_id"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Endpoint updated successfully"
            },
            "400": {
              "description": "Bad request"
            },
            "401": {
              "description": "Authentication error"
            },
            "403": {
              "description": "Forbidden - not an admin"
            },
            "404": {
              "description": "Endpoint not found"
            },
            "409": {
              "description": "Conflict - endpoint path already exists"
            },
            "500": {
              "description": "Server error"
            }
          },
          "summary": "Update an existing endpoint in the endpoints table (Admin only endpoint)",
          "tags": [
            "Admin Functions"
          ]
        }
      },
      "/admin/endpoints": {
        "get": {
          "parameters": [
            {
              "description": "Admin API Key for authentication",
              "in": "header",
              "name": "API-Key",
              "required": true,
              "type": "string"
            },
            {
              "description": "A valid token for verification",
              "in": "query",
              "name": "token",
              "required": true,
              "type": "string"
            },
            {
              "description": "Filter by active status (optional)",
              "in": "query",
              "name": "active",
              "required": false,
              "type": "boolean"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Endpoints retrieved successfully"
            },
            "401": {
              "description": "Authentication error"
            },
            "403": {
              "description": "Forbidden - not an admin"
            },
            "500": {
              "description": "Server error"
            }
          },
          "summary": "Get all endpoints from the endpoints table (Admin only endpoint)",
          "tags": [
            "Admin Functions"
          ]
        }
      },
      "/admin/user": {
        "post": {
          "parameters": [
            {
              "description": "Admin API Key for authentication",
              "in": "header",
              "name": "API-Key",
              "required": true,
              "type": "string"
            },
            {
              "description": "A valid token for verification",
              "in": "query",
              "name": "token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "active": {
                    "description": "Whether the user is active",
                    "type": "boolean"
                  },
                  "comment": {
                    "description": "Optional comment about the user",
                    "type": "string"
                  },
                  "common_name": {
                    "description": "Common name for the new user (optional)",
                    "type": "string"
                  },
                  "company": {
                    "description": "Company name for the new user (optional)",
                    "type": "string"
                  },
                  "department": {
                    "description": "Department name for the new user (optional)",
                    "type": "string"
                  },
                  "scope": {
                    "description": "Permission scope for the new user (1-5)",
                    "type": "integer"
                  },
                  "user_email": {
                    "description": "Email address for the new user",
                    "type": "string"
                  },
                  "user_name": {
                    "description": "Username for the new user",
                    "type": "string"
                  }
                },
                "required": [
                  "user_name",
                  "user_email"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "201": {
              "description": "User created successfully",
              "schema": {
                "properties": {
                  "api_key": {
                    "description": "API key assigned to the new user",
                    "type": "string"
                  },
                  "message": {
                    "example": "User created successfully",
                    "type": "string"
                  },
                  "user_id": {
                    "description": "ID of the newly created user",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing required fields or invalid data",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing API Key header or Invalid API Key",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Forbidden",
                    "type": "string"
                  },
                  "message": {
                    "example": "Admin privileges required",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Error creating user",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Create a new user in the system (Admin only endpoint)",
          "tags": [
            "Admin Functions"
          ]
        },
        "put": {
          "parameters": [
            {
              "description": "Admin API Key for authentication",
              "in": "header",
              "name": "API-Key",
              "required": true,
              "type": "string"
            },
            {
              "description": "A valid token for verification",
              "in": "query",
              "name": "token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "active": {
                    "description": "Updated active status (optional)",
                    "type": "boolean"
                  },
                  "aic_balance": {
                    "description": "Custom monthly balance for the user (optional)",
                    "format": "decimal",
                    "type": "number"
                  },
                  "comment": {
                    "description": "Updated comment (optional)",
                    "type": "string"
                  },
                  "common_name": {
                    "description": "Updated common name (optional)",
                    "type": "string"
                  },
                  "company": {
                    "description": "Updated company name (optional)",
                    "type": "string"
                  },
                  "department": {
                    "description": "Updated department name (optional)",
                    "type": "string"
                  },
                  "id": {
                    "description": "UUID of the user to update",
                    "type": "string"
                  },
                  "scope": {
                    "description": "Updated permission scope (optional, 1-5)",
                    "type": "integer"
                  },
                  "user_email": {
                    "description": "Updated email address (optional)",
                    "type": "string"
                  },
                  "user_name": {
                    "description": "Updated username (optional)",
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "User updated successfully",
              "schema": {
                "properties": {
                  "message": {
                    "example": "User updated successfully",
                    "type": "string"
                  },
                  "updated_fields": {
                    "description": "List of fields that were updated",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "user_id": {
                    "description": "ID of the updated user",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing required fields or invalid data",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing API Key header or Invalid API Key",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Forbidden",
                    "type": "string"
                  },
                  "message": {
                    "example": "Admin privileges required",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Not Found",
                    "type": "string"
                  },
                  "message": {
                    "example": "User not found",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "409": {
              "description": "Conflict",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Conflict",
                    "type": "string"
                  },
                  "message": {
                    "example": "Email address already in use by another user",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Error updating user",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Update existing user details (Admin only endpoint)",
          "tags": [
            "Admin Functions"
          ]
        }
      },
      "/docint/layout": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "description": "Valid token for authentication",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "file_ids": {
                    "description": "Array of file IDs to process (uploaded via /file endpoint)",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "include_barcode": {
                    "default": false,
                    "description": "Enable barcode detection",
                    "type": "boolean"
                  },
                  "include_keyvalue_pairs": {
                    "default": false,
                    "description": "Include key-value pairs extraction",
                    "type": "boolean"
                  },
                  "include_language": {
                    "default": false,
                    "description": "Include language identification",
                    "type": "boolean"
                  },
                  "output_format": {
                    "default": "text",
                    "description": "Output format for tables and structured content",
                    "enum": [
                      "text",
                      "markdown"
                    ],
                    "type": "string"
                  },
                  "page_range": {
                    "description": "Page range to process (e.g., \"1,3-6\"), only used if page_selection is \"range\"",
                    "type": "string"
                  },
                  "page_selection": {
                    "default": "all_pages",
                    "description": "Page selection strategy",
                    "enum": [
                      "all_pages",
                      "range"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "file_ids"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Documents successfully processed",
              "schema": {
                "properties": {
                  "documents_processed": {
                    "description": "Number of documents processed",
                    "type": "integer"
                  },
                  "message": {
                    "example": "Documents successfully processed",
                    "type": "string"
                  },
                  "pages_processed": {
                    "description": "Total number of pages processed across all documents",
                    "type": "integer"
                  },
                  "results": {
                    "items": {
                      "properties": {
                        "file_id": {
                          "description": "ID of the processed file",
                          "type": "string"
                        },
                        "file_name": {
                          "description": "Original name of the processed file",
                          "type": "string"
                        },
                        "pages": {
                          "items": {
                            "properties": {
                              "barcodes": {
                                "description": "Extracted barcodes",
                                "items": {
                                  "properties": {
                                    "confidence": {
                                      "description": "Confidence score for the barcode detection",
                                      "type": "number"
                                    },
                                    "type": {
                                      "description": "Type of barcode detected",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "Decoded barcode value",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "detected_languages": {
                                "description": "Detected languages for this page",
                                "items": {
                                  "properties": {
                                    "confidence": {
                                      "description": "Confidence score for language detection",
                                      "type": "number"
                                    },
                                    "language": {
                                      "description": "Detected language code",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "has_handwritten_content": {
                                "description": "Whether page contains handwritten content",
                                "type": "boolean"
                              },
                              "height": {
                                "description": "Page height",
                                "type": "number"
                              },
                              "page_number": {
                                "description": "Page number",
                                "type": "integer"
                              },
                              "page_text_all": {
                                "description": "All text content from the page combined",
                                "type": "string"
                              },
                              "selection_marks": {
                                "description": "Extracted selection marks (checkboxes)",
                                "items": {
                                  "properties": {
                                    "confidence": {
                                      "description": "Confidence score for the state detection",
                                      "type": "number"
                                    },
                                    "state": {
                                      "description": "State of the selection mark (e.g., \"selected\", \"unselected\")",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "tables": {
                                "description": "Extracted tables",
                                "items": {
                                  "properties": {
                                    "cells": {
                                      "description": "Cell information",
                                      "items": {
                                        "properties": {
                                          "column_index": {
                                            "description": "Column index of the cell",
                                            "type": "integer"
                                          },
                                          "column_span": {
                                            "description": "Column span of the cell",
                                            "type": "integer"
                                          },
                                          "content": {
                                            "description": "Content of the cell",
                                            "type": "string"
                                          },
                                          "kind": {
                                            "description": "Kind of cell (if available)",
                                            "type": "string"
                                          },
                                          "row_index": {
                                            "description": "Row index of the cell",
                                            "type": "integer"
                                          },
                                          "row_span": {
                                            "description": "Row span of the cell",
                                            "type": "integer"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "column_count": {
                                      "description": "Number of columns in the table",
                                      "type": "integer"
                                    },
                                    "formatted": {
                                      "description": "Formatted table in requested format",
                                      "type": "string"
                                    },
                                    "row_count": {
                                      "description": "Number of rows in the table",
                                      "type": "integer"
                                    },
                                    "table_summary": {
                                      "description": "Markdown summary of the table",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "text": {
                                "description": "Extracted text content",
                                "items": {
                                  "properties": {
                                    "content": {
                                      "description": "Text content",
                                      "type": "string"
                                    },
                                    "role": {
                                      "description": "Role of the text (if available)",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "Type of text element (e.g., \"paragraph\", \"line\")",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "unit": {
                                "description": "Measurement unit (e.g., \"pixel\", \"inch\")",
                                "type": "string"
                              },
                              "width": {
                                "description": "Page width",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing file_ids parameter or empty file_ids array",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing X-Token header or Invalid token",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Not Found",
                    "type": "string"
                  },
                  "message": {
                    "example": "One or more files not found",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "415": {
              "description": "Unsupported media type",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Unsupported Media Type",
                    "type": "string"
                  },
                  "message": {
                    "example": "File type not supported for text extraction",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Error processing document",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Extract tables, checkboxes, and text from forms and documents",
          "tags": [
            "Document Intelligence"
          ]
        }
      },
      "/docint/read": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "description": "Valid token for authentication",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "barcode_detection": {
                    "default": false,
                    "description": "Enable barcode detection",
                    "type": "boolean"
                  },
                  "file_ids": {
                    "description": "Array of file IDs to process (uploaded via /file endpoint)",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "language": {
                    "default": false,
                    "description": "Include language identification",
                    "type": "boolean"
                  },
                  "page_range": {
                    "description": "Page range to process (e.g., \"1,3-6\"), only used if page_selection is \"range\"",
                    "type": "string"
                  },
                  "page_selection": {
                    "default": "all_pages",
                    "description": "Page selection strategy",
                    "enum": [
                      "all_pages",
                      "range"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "file_ids"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Documents successfully processed",
              "schema": {
                "properties": {
                  "documents_processed": {
                    "description": "Number of documents processed",
                    "type": "integer"
                  },
                  "message": {
                    "example": "Documents successfully processed",
                    "type": "string"
                  },
                  "pages_processed": {
                    "description": "Total number of pages processed across all documents",
                    "type": "integer"
                  },
                  "results": {
                    "items": {
                      "properties": {
                        "file_id": {
                          "description": "ID of the processed file",
                          "type": "string"
                        },
                        "file_name": {
                          "description": "Original name of the processed file",
                          "type": "string"
                        },
                        "pages": {
                          "items": {
                            "properties": {
                              "has_handwritten_content": {
                                "description": "Whether page contains handwritten content",
                                "type": "boolean"
                              },
                              "height": {
                                "description": "Page height",
                                "type": "number"
                              },
                              "page_number": {
                                "description": "Page number",
                                "type": "integer"
                              },
                              "text": {
                                "items": {
                                  "properties": {
                                    "content": {
                                      "description": "Text content",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "Type of text element (paragraph)",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "unit": {
                                "description": "Measurement unit (e.g., \"pixel\", \"inch\")",
                                "type": "string"
                              },
                              "width": {
                                "description": "Page width",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing file_ids parameter or empty file_ids array",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing X-Token header or Invalid token",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Not Found",
                    "type": "string"
                  },
                  "message": {
                    "example": "One or more files not found",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "415": {
              "description": "Unsupported media type",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Unsupported Media Type",
                    "type": "string"
                  },
                  "message": {
                    "example": "File type not supported for text extraction",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Error processing document",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Extract printed and handwritten text from images and documents",
          "tags": [
            "Document Intelligence"
          ]
        }
      },
      "/docint/summarization": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "description": "Valid token for authentication",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "file_id": {
                    "description": "ID of the uploaded file to summarize",
                    "type": "string"
                  },
                  "include_file_upload": {
                    "default": true,
                    "description": "Whether to create and upload a text file with the summary",
                    "type": "boolean"
                  },
                  "include_structure": {
                    "default": true,
                    "description": "Whether to include document structure in the summary",
                    "type": "boolean"
                  },
                  "length": {
                    "default": "medium",
                    "description": "Desired summary length",
                    "enum": [
                      "short",
                      "medium",
                      "long",
                      "very_long"
                    ],
                    "type": "string"
                  },
                  "style": {
                    "default": "concise",
                    "description": "Style of the summary",
                    "enum": [
                      "concise",
                      "detailed",
                      "creative",
                      "technical",
                      "narrative",
                      "bullet_points"
                    ],
                    "type": "string"
                  },
                  "temperature": {
                    "default": 0.3,
                    "description": "Creativity level (0.0 = deterministic, 1.0 = creative)",
                    "format": "float",
                    "maximum": 1.0,
                    "minimum": 0,
                    "type": "number"
                  }
                },
                "required": [
                  "file_id"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Document successfully summarized",
              "schema": {
                "properties": {
                  "document_structure": {
                    "description": "Outline of document structure (if requested)",
                    "type": "object"
                  },
                  "key_points": {
                    "description": "List of key points from the document",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "message": {
                    "example": "Document successfully summarized",
                    "type": "string"
                  },
                  "model": {
                    "description": "The AI model used for generating the summary",
                    "type": "string"
                  },
                  "original_file_id": {
                    "description": "ID of the original document",
                    "type": "string"
                  },
                  "pages_processed": {
                    "description": "Number of pages/slides/sheets processed",
                    "type": "integer"
                  },
                  "summary": {
                    "description": "Text summary of the document",
                    "type": "string"
                  },
                  "summary_file_id": {
                    "description": "ID of the uploaded summary file (if requested)",
                    "type": "string"
                  },
                  "token_usage": {
                    "description": "Token usage statistics",
                    "properties": {
                      "completion_tokens": {
                        "type": "integer"
                      },
                      "prompt_tokens": {
                        "type": "integer"
                      },
                      "total_tokens": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing file_id parameter",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing X-Token header or Invalid token",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Not Found",
                    "type": "string"
                  },
                  "message": {
                    "example": "File with specified ID not found",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "415": {
              "description": "Unsupported media type",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Unsupported Media Type",
                    "type": "string"
                  },
                  "message": {
                    "example": "File type not supported for summarization",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Error processing document",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Summarize documents using AI (PDF, DOCX, PPTX, XLSX)",
          "tags": [
            "Document Intelligence"
          ]
        }
      },
      "/file": {
        "delete": {
          "description": "Deletes file from Azure Blob Storage and removes the database entry",
          "parameters": [
            {
              "description": "Valid token for authentication",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "description": "Unique file identifier",
              "in": "query",
              "name": "file_id",
              "required": true,
              "type": "string"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "File deleted successfully",
              "schema": {
                "properties": {
                  "file_id": {
                    "example": "12345678-1234-1234-1234-123456789012",
                    "type": "string"
                  },
                  "message": {
                    "example": "File deleted successfully",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "message": {
                    "example": "file_id is required as a query parameter",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "enum": [
                      "Missing X-Token header",
                      "Invalid token",
                      "Token has expired"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Forbidden",
                    "type": "string"
                  },
                  "message": {
                    "example": "You don't have permission to delete this file",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "404": {
              "description": "File not found",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Not Found",
                    "type": "string"
                  },
                  "message": {
                    "example": "File with ID 12345678-1234-1234-1234-123456789012 not found",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Error deleting file",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Delete a previously uploaded file using its ID",
          "tags": [
            "File Management"
          ]
        },
        "post": {
          "consumes": [
            "multipart/form-data"
          ],
          "description": "Uploads one or more files to Azure Blob Storage and stores metadata in the database. Executable files (.exe, .bat, .cmd, .sh, .ps1, .dll, .msi, etc.) are not allowed.",
          "parameters": [
            {
              "description": "Valid token for authentication",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "description": "Files to upload (can be multiple). Executable files are not permitted.",
              "in": "formData",
              "name": "files",
              "required": true,
              "type": "file"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Files uploaded successfully",
              "schema": {
                "properties": {
                  "message": {
                    "example": "Files uploaded successfully",
                    "type": "string"
                  },
                  "uploaded_files": {
                    "items": {
                      "properties": {
                        "content_type": {
                          "example": "application/pdf",
                          "type": "string"
                        },
                        "file_id": {
                          "example": "12345678-1234-1234-1234-123456789012",
                          "type": "string"
                        },
                        "file_name": {
                          "example": "document.pdf",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "message": {
                    "enum": [
                      "No files part in the request",
                      "No files selected for upload",
                      "File type .exe is not allowed for security reasons",
                      "File type .bat is not allowed for security reasons",
                      "File type .cmd is not allowed for security reasons",
                      "File type .sh is not allowed for security reasons",
                      "File type .ps1 is not allowed for security reasons",
                      "File type .dll is not allowed for security reasons",
                      "File type .msi is not allowed for security reasons"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "enum": [
                      "Missing X-Token header",
                      "Invalid token",
                      "Token has expired"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Error uploading files",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Upload one or more files to Azure Blob Storage",
          "tags": [
            "File Management"
          ]
        }
      },
      "/file/list": {
        "get": {
          "description": "Returns a list of all files uploaded by the authenticated user. Admin users can see all files.",
          "parameters": [
            {
              "description": "API Key for authentication",
              "in": "header",
              "name": "API-Key",
              "required": false,
              "type": "string"
            },
            {
              "description": "Valid token for authentication",
              "in": "header",
              "name": "X-Token",
              "required": false,
              "type": "string"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Files retrieved successfully",
              "schema": {
                "properties": {
                  "files": {
                    "items": {
                      "properties": {
                        "content_type": {
                          "example": "application/pdf",
                          "type": "string"
                        },
                        "file_id": {
                          "example": "12345678-1234-1234-1234-123456789012",
                          "type": "string"
                        },
                        "file_name": {
                          "example": "document.pdf",
                          "type": "string"
                        },
                        "file_size": {
                          "example": 1024,
                          "type": "integer"
                        },
                        "upload_date": {
                          "example": "2024-03-16T10:30:45+02:00",
                          "format": "date-time",
                          "type": "string"
                        },
                        "user_id": {
                          "description": "Only returned for admin users",
                          "example": "12345678-1234-1234-1234-123456789012",
                          "type": "string"
                        },
                        "user_name": {
                          "description": "Only returned for admin users",
                          "example": "johndoe",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing authentication headers",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Forbidden",
                    "type": "string"
                  },
                  "message": {
                    "example": "Authentication token has expired",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Error retrieving files",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "List all files uploaded by the authenticated user or all files for admin users",
          "tags": [
            "File Management"
          ]
        }
      },
      "/file/url": {
        "get": {
          "description": "Returns file details including access URL, content type, and upload date",
          "parameters": [
            {
              "description": "Valid token for authentication",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "description": "Unique file identifier",
              "in": "query",
              "name": "file_id",
              "required": true,
              "type": "string"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "File URL retrieved successfully",
              "schema": {
                "properties": {
                  "content_type": {
                    "example": "application/pdf",
                    "type": "string"
                  },
                  "file_name": {
                    "example": "document.pdf",
                    "type": "string"
                  },
                  "file_url": {
                    "example": "https://storage.blob.core.windows.net/file-uploads/12345678-1234-1234-1234-123456789012.pdf",
                    "type": "string"
                  },
                  "upload_date": {
                    "example": "Sat, 16 Mar 2024 08:30:45 GMT",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "message": {
                    "example": "file_id is required as a query parameter",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "enum": [
                      "Missing X-Token header",
                      "Invalid token",
                      "Token has expired"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Forbidden",
                    "type": "string"
                  },
                  "message": {
                    "example": "You don't have permission to access this file",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "404": {
              "description": "File not found",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Not Found",
                    "type": "string"
                  },
                  "message": {
                    "example": "File with ID 12345678-1234-1234-1234-123456789012 not found",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Error retrieving file URL",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Get access URL for a previously uploaded file using its ID",
          "tags": [
            "File Management"
          ]
        }
      },
      "/image-generation/dalle3": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "description": "Authentication token",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "deployment": {
                    "default": "dall-e-3",
                    "description": "The DALLE-3 model deployment to use",
                    "enum": [
                      "dall-e-3",
                      "dalle3-hd"
                    ],
                    "type": "string"
                  },
                  "prompt": {
                    "description": "Text prompt describing the image to generate",
                    "type": "string"
                  },
                  "quality": {
                    "default": "standard",
                    "description": "Image quality (standard or high definition)",
                    "enum": [
                      "standard",
                      "hd"
                    ],
                    "type": "string"
                  },
                  "size": {
                    "default": "1024x1024",
                    "description": "Output image size",
                    "enum": [
                      "1024x1024",
                      "1792x1024",
                      "1024x1792"
                    ],
                    "type": "string"
                  },
                  "style": {
                    "default": "vivid",
                    "description": "Image generation style",
                    "enum": [
                      "vivid",
                      "natural"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "prompt"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Successful image generation",
              "schema": {
                "properties": {
                  "file_id": {
                    "description": "ID of the file in the upload system",
                    "example": "12345678-1234-5678-1234-567812345678",
                    "type": "string"
                  },
                  "message": {
                    "description": "Success message",
                    "example": "Image generated successfully",
                    "type": "string"
                  },
                  "model": {
                    "description": "The model deployment used",
                    "enum": [
                      "dall-e-3",
                      "dalle3-hd"
                    ],
                    "type": "string"
                  },
                  "prompt_tokens": {
                    "description": "Number of prompt tokens used",
                    "type": "integer"
                  },
                  "response": {
                    "example": "200",
                    "type": "string"
                  },
                  "user_email": {
                    "description": "Email of the authenticated user",
                    "type": "string"
                  },
                  "user_id": {
                    "description": "ID of the authenticated user",
                    "type": "integer"
                  },
                  "user_name": {
                    "description": "Name of the authenticated user",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request - Missing required fields or invalid parameter values",
              "schema": {
                "properties": {
                  "message": {
                    "description": "Error message",
                    "example": "Missing required field: prompt",
                    "type": "string"
                  },
                  "response": {
                    "example": "400",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error - Invalid or expired token",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "description": "Authentication error details",
                    "example": "Missing X-Token header",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error or API service unavailable",
              "schema": {
                "properties": {
                  "message": {
                    "description": "Error message from the server, OpenAI API, or Azure Blob Storage",
                    "example": "Failed to generate image",
                    "type": "string"
                  },
                  "response": {
                    "example": "500",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "security": [
            {
              "ApiKeyAuth": []
            }
          ],
          "summary": "Generate images using Azure OpenAI DALLE-3",
          "tags": [
            "Image Generation"
          ]
        }
      },
      "/image-generation/stable-diffusion-ultra": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "description": "Authentication token",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "negative_prompt": {
                    "default": "",
                    "description": "Text prompt describing what to avoid in the generated image",
                    "type": "string"
                  },
                  "output_format": {
                    "default": "png",
                    "description": "Output image format",
                    "enum": [
                      "png",
                      "jpeg"
                    ],
                    "type": "string"
                  },
                  "prompt": {
                    "description": "Text prompt describing the image to generate",
                    "type": "string"
                  },
                  "seed": {
                    "default": -1,
                    "description": "Seed for reproducible generation",
                    "type": "integer"
                  },
                  "size": {
                    "default": "1024x1024",
                    "description": "Output image size",
                    "enum": [
                      "1024x1024",
                      "768x768",
                      "512x512"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "prompt"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Successful image generation",
              "schema": {
                "properties": {
                  "file_id": {
                    "description": "ID of the file in the upload system",
                    "example": "12345678-1234-5678-1234-567812345678",
                    "type": "string"
                  },
                  "message": {
                    "description": "Success message",
                    "example": "Image generated successfully",
                    "type": "string"
                  },
                  "model": {
                    "description": "The model used for generation",
                    "example": "stable-diffusion-ultra",
                    "type": "string"
                  },
                  "response": {
                    "example": "200",
                    "type": "string"
                  },
                  "user_email": {
                    "description": "Email of the authenticated user",
                    "type": "string"
                  },
                  "user_id": {
                    "description": "ID of the authenticated user",
                    "type": "integer"
                  },
                  "user_name": {
                    "description": "Name of the authenticated user",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "message": {
                    "description": "Error message",
                    "type": "string"
                  },
                  "response": {
                    "example": "400",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "description": "Authentication error details",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "message": {
                    "description": "Error message from the server or Stable Diffusion API",
                    "type": "string"
                  },
                  "response": {
                    "example": "500",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "security": [
            {
              "ApiKeyHeader": []
            }
          ],
          "summary": "Generate images using Azure Stable Diffusion Ultra",
          "tags": [
            "Image Generation"
          ]
        }
      },
      "/insurance-bot/chat": {
        "delete": {
          "parameters": [
            {
              "description": "Authentication token",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "description": "ID of the conversation to delete",
              "in": "query",
              "name": "conversation_id",
              "required": true,
              "type": "string"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Conversation deleted successfully",
              "schema": {
                "properties": {
                  "conversation_id": {
                    "description": "ID of the deleted conversation",
                    "type": "string"
                  },
                  "message": {
                    "example": "Conversation deleted successfully",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Delete a vehicle insurance quote conversation",
          "tags": [
            "Insurance Bot"
          ]
        },
        "post": {
          "parameters": [
            {
              "description": "Authentication token",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "conversation_id": {
                    "description": "Existing conversation ID (if continuing a conversation)",
                    "type": "string"
                  },
                  "temperature": {
                    "default": 0.5,
                    "description": "Controls randomness (0=focused, 1=creative)",
                    "format": "float",
                    "maximum": 1,
                    "minimum": 0,
                    "type": "number"
                  },
                  "user_message": {
                    "description": "Message from the user",
                    "type": "string"
                  }
                },
                "required": [
                  "user_message"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Chat response received successfully",
              "schema": {
                "properties": {
                  "assistant_message": {
                    "description": "Response from the insurance bot",
                    "type": "string"
                  },
                  "completion_tokens": {
                    "description": "Number of completion tokens used",
                    "type": "integer"
                  },
                  "conversation_id": {
                    "description": "Unique ID for the conversation",
                    "type": "string"
                  },
                  "extraction_data": {
                    "description": "Extracted vehicle information",
                    "type": "object"
                  },
                  "is_off_topic": {
                    "description": "Whether the user query was off-topic",
                    "type": "boolean"
                  },
                  "is_quote_complete": {
                    "description": "Whether the quote information collection is complete",
                    "type": "boolean"
                  },
                  "options": {
                    "description": "Relevant options for the current conversation state",
                    "type": "object"
                  },
                  "prompt_tokens": {
                    "description": "Number of prompt tokens used",
                    "type": "integer"
                  },
                  "total_tokens": {
                    "description": "Total number of tokens used",
                    "type": "integer"
                  },
                  "valid_models": {
                    "description": "List of valid models if a make is specified",
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Vehicle insurance quote bot API endpoint",
          "tags": [
            "Insurance Bot"
          ]
        }
      },
      "/llm/conversation": {
        "delete": {
          "parameters": [
            {
              "description": "Authentication token",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "description": "ID of the conversation to delete",
              "in": "query",
              "name": "conversation_id",
              "required": true,
              "type": "string"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Conversation deleted successfully",
              "schema": {
                "properties": {
                  "conversation_id": {
                    "description": "ID of the deleted conversation",
                    "type": "string"
                  },
                  "message": {
                    "example": "Conversation deleted successfully",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing conversation_id parameter",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Token has expired",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Not Found",
                    "type": "string"
                  },
                  "message": {
                    "example": "Conversation not found",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Error deleting conversation",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Delete an LLM conversation",
          "tags": [
            "LLM Conversational"
          ]
        }
      },
      "/llm/conversation/chat": {
        "post": {
          "parameters": [
            {
              "description": "Authentication token",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "assistant_type": {
                    "default": "general",
                    "description": "Type of assistant to use",
                    "enum": [
                      "general",
                      "coding",
                      "creative",
                      "research",
                      "business"
                    ],
                    "type": "string"
                  },
                  "llm": {
                    "description": "LLM model to use for conversation",
                    "enum": [
                      "gpt-4o",
                      "gpt-4o-mini",
                      "o1-mini",
                      "deepseek-r1",
                      "llama-3-1-405b"
                    ],
                    "type": "string"
                  },
                  "temperature": {
                    "default": 0.7,
                    "description": "Controls randomness (0=focused, 1=creative)",
                    "format": "float",
                    "maximum": 1,
                    "minimum": 0,
                    "type": "number"
                  },
                  "user_message": {
                    "description": "Initial message from the user",
                    "type": "string"
                  }
                },
                "required": [
                  "llm",
                  "user_message"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Conversation created successfully",
              "schema": {
                "properties": {
                  "assistant_message": {
                    "description": "Response from the LLM",
                    "type": "string"
                  },
                  "assistant_used": {
                    "description": "The assistant type used",
                    "type": "string"
                  },
                  "cached_tokens": {
                    "description": "Number of cached tokens used",
                    "type": "integer"
                  },
                  "completion_tokens": {
                    "description": "Number of completion tokens used",
                    "type": "integer"
                  },
                  "conversation_id": {
                    "description": "Unique ID for the conversation",
                    "type": "string"
                  },
                  "model_used": {
                    "description": "The LLM model used",
                    "type": "string"
                  },
                  "prompt_tokens": {
                    "description": "Number of prompt tokens used",
                    "type": "integer"
                  },
                  "total_tokens": {
                    "description": "Total number of tokens used",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing required fields or Invalid LLM selection",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Token has expired",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "402": {
              "description": "Payment required",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Insufficient Balance",
                    "type": "string"
                  },
                  "message": {
                    "example": "Your API call balance is depleted. Please upgrade your plan for additional calls.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Error creating conversation",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Create a new LLM conversation",
          "tags": [
            "LLM Conversational"
          ]
        }
      },
      "/llm/conversation/continue": {
        "post": {
          "parameters": [
            {
              "description": "Authentication token",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "conversation_id": {
                    "description": "ID of the conversation to continue",
                    "type": "string"
                  },
                  "user_message": {
                    "description": "Follow-up message from the user",
                    "type": "string"
                  }
                },
                "required": [
                  "conversation_id",
                  "user_message"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Conversation continued successfully",
              "schema": {
                "properties": {
                  "assistant_message": {
                    "description": "Response from the LLM",
                    "type": "string"
                  },
                  "assistant_used": {
                    "description": "The assistant type used",
                    "type": "string"
                  },
                  "cached_tokens": {
                    "description": "Number of cached tokens used",
                    "type": "integer"
                  },
                  "completion_tokens": {
                    "description": "Number of completion tokens used",
                    "type": "integer"
                  },
                  "conversation_id": {
                    "description": "Unique ID for the conversation",
                    "type": "string"
                  },
                  "model_used": {
                    "description": "The LLM model used",
                    "type": "string"
                  },
                  "prompt_tokens": {
                    "description": "Number of prompt tokens used",
                    "type": "integer"
                  },
                  "total_tokens": {
                    "description": "Total number of tokens used",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing required fields",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Token has expired",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "402": {
              "description": "Payment required",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Insufficient Balance",
                    "type": "string"
                  },
                  "message": {
                    "example": "Your API call balance is depleted. Please upgrade your plan for additional calls.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Not Found",
                    "type": "string"
                  },
                  "message": {
                    "example": "Conversation not found",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Error continuing conversation",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Continue an existing LLM conversation",
          "tags": [
            "LLM Conversational"
          ]
        }
      },
      "/llm/deepseek-r1": {
        "post": {
          "description": "<br/>DeepSeek-R1 LLM model for text generation on complex tasks that required chain of though and deep reasoning.<br/><br/>",
          "parameters": [
            {
              "description": "Authentication token",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "max_tokens": {
                    "default": 2048,
                    "description": "Maximum number of tokens to generate",
                    "type": "integer"
                  },
                  "system_prompt": {
                    "default": "You are a helpful AI assistant",
                    "description": "System prompt to control model behavior",
                    "type": "string"
                  },
                  "temperature": {
                    "default": 0.5,
                    "description": "Controls randomness (0=focused, 1=creative)",
                    "format": "float",
                    "maximum": 1,
                    "minimum": 0.1,
                    "type": "number"
                  },
                  "user_input": {
                    "description": "Text for the model to process",
                    "type": "string"
                  }
                },
                "required": [
                  "user_input"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Successful model response",
              "schema": {
                "properties": {
                  "cached_tokens": {
                    "description": "Number of cached tokens (if supported by model)",
                    "example": 0,
                    "type": "integer"
                  },
                  "completion_tokens": {
                    "description": "Number of tokens generated by the llm",
                    "example": 84,
                    "type": "integer"
                  },
                  "message": {
                    "example": "I'll help you with that question. Based on the information provided...",
                    "type": "string"
                  },
                  "model": {
                    "example": "deepseek-r1-aiapi",
                    "type": "string"
                  },
                  "prompt_tokens": {
                    "description": "Number of tokens pass in the prompt",
                    "example": 125,
                    "type": "integer"
                  },
                  "response": {
                    "example": "200",
                    "type": "string"
                  },
                  "total_tokens": {
                    "description": "Total number of tokens used",
                    "example": 209,
                    "type": "integer"
                  },
                  "user_email": {
                    "example": "john.doe@example.com",
                    "type": "string"
                  },
                  "user_id": {
                    "example": "user123",
                    "type": "string"
                  },
                  "user_name": {
                    "example": "John Doe",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "message": {
                    "example": "Missing required fields: user_input",
                    "type": "string"
                  },
                  "response": {
                    "example": "400",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Token has expired",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "message": {
                    "example": "Internal server error occurred during API request",
                    "type": "string"
                  },
                  "response": {
                    "example": "500",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Consumes 3 AI credits per call",
          "tags": [
            "LLM"
          ]
        }
      },
      "/llm/deepseek-v3": {
        "post": {
          "description": "<br/>DeepSeek-V3 LLM model for text generation and general task completion.<br/><br/>",
          "parameters": [
            {
              "description": "Authentication token",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "json_output": {
                    "default": false,
                    "description": "Whether to return the response in JSON format",
                    "type": "boolean"
                  },
                  "max_tokens": {
                    "default": 1000,
                    "description": "Maximum number of tokens to generate",
                    "maximum": 4000,
                    "minimum": 0,
                    "type": "integer"
                  },
                  "system_prompt": {
                    "default": "You are a helpful AI assistant",
                    "description": "System prompt to control model behavior",
                    "type": "string"
                  },
                  "temperature": {
                    "default": 0.7,
                    "description": "Controls randomness (0.1=focused, 0.99=creative)",
                    "format": "float",
                    "maximum": 0.99,
                    "minimum": 0.1,
                    "type": "number"
                  },
                  "user_input": {
                    "description": "Text for the model to process",
                    "type": "string"
                  }
                },
                "required": [
                  "user_input"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Successful model response",
              "schema": {
                "properties": {
                  "cached_tokens": {
                    "description": "Number of cached tokens (if supported by model)",
                    "example": 0,
                    "type": "integer"
                  },
                  "completion_tokens": {
                    "description": "Number of tokens generated by the llm",
                    "example": 84,
                    "type": "integer"
                  },
                  "message": {
                    "example": "I'll help you with that question. Based on the information provided...",
                    "type": "string"
                  },
                  "model": {
                    "example": "DeepSeek-V3",
                    "type": "string"
                  },
                  "prompt_tokens": {
                    "description": "Number of tokens pass in the prompt",
                    "example": 125,
                    "type": "integer"
                  },
                  "response": {
                    "example": "200",
                    "type": "string"
                  },
                  "total_tokens": {
                    "description": "Total number of tokens used",
                    "example": 209,
                    "type": "integer"
                  },
                  "user_email": {
                    "example": "john.doe@example.com",
                    "type": "string"
                  },
                  "user_id": {
                    "example": "user123",
                    "type": "string"
                  },
                  "user_name": {
                    "example": "John Doe",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "message": {
                    "example": "Missing required fields: user_input",
                    "type": "string"
                  },
                  "response": {
                    "example": "400",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Token has expired",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "message": {
                    "example": "Internal server error occurred during API request",
                    "type": "string"
                  },
                  "response": {
                    "example": "500",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Consumes 3 AI credits per call",
          "tags": [
            "LLM"
          ]
        }
      },
      "/llm/gpt-4o": {
        "post": {
          "description": "<br/>OpenAI GPT-4o LLM model for text completion and content generation. <br/><br/>",
          "parameters": [
            {
              "description": "Authentication token",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "json_output": {
                    "default": false,
                    "description": "When true, the model will return a structured JSON response",
                    "type": "boolean"
                  },
                  "system_prompt": {
                    "default": "You are a helpful AI assistant",
                    "description": "System prompt to control model behavior",
                    "type": "string"
                  },
                  "temperature": {
                    "default": 0.5,
                    "description": "Controls randomness (0=focused, 1=creative)",
                    "format": "float",
                    "maximum": 1,
                    "minimum": 0,
                    "type": "number"
                  },
                  "user_input": {
                    "description": "Text for the model to process",
                    "type": "string"
                  }
                },
                "required": [
                  "user_input"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Successful model response",
              "schema": {
                "properties": {
                  "cached_tokens": {
                    "description": "Number of cached tokens (if supported by model)",
                    "example": 0,
                    "type": "integer"
                  },
                  "completion_tokens": {
                    "description": "Number of tokens generated by the llm",
                    "example": 84,
                    "type": "integer"
                  },
                  "message": {
                    "example": "I'll help you with that question. Based on the information provided...",
                    "type": "string"
                  },
                  "model": {
                    "example": "gpt-4o",
                    "type": "string"
                  },
                  "prompt_tokens": {
                    "description": "Number of tokens pass in the prompt",
                    "example": 125,
                    "type": "integer"
                  },
                  "response": {
                    "example": "200",
                    "type": "string"
                  },
                  "total_tokens": {
                    "description": "Total number of tokens used",
                    "example": 209,
                    "type": "integer"
                  },
                  "user_email": {
                    "example": "john.doe@example.com",
                    "type": "string"
                  },
                  "user_id": {
                    "example": "user123",
                    "type": "string"
                  },
                  "user_name": {
                    "example": "John Doe",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "message": {
                    "example": "Missing required fields: user_input",
                    "type": "string"
                  },
                  "response": {
                    "example": "400",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Token has expired",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "message": {
                    "example": "Internal server error occurred during API request",
                    "type": "string"
                  },
                  "response": {
                    "example": "500",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Consumes 2 AI credits per call",
          "tags": [
            "LLM"
          ]
        }
      },
      "/llm/gpt-4o-mini": {
        "post": {
          "description": "<br/>OpenAI GPT-4o-mini LLM model for everyday text completion tasks.<br/><br/>",
          "parameters": [
            {
              "description": "Authentication token",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "json_output": {
                    "default": false,
                    "description": "When true, the model will return a structured JSON response",
                    "type": "boolean"
                  },
                  "system_prompt": {
                    "default": "You are a helpful AI assistant",
                    "description": "System prompt to control model behavior",
                    "type": "string"
                  },
                  "temperature": {
                    "default": 0.5,
                    "description": "Controls randomness (0=focused, 1=creative)",
                    "format": "float",
                    "maximum": 1,
                    "minimum": 0,
                    "type": "number"
                  },
                  "user_input": {
                    "description": "Text for the model to process",
                    "type": "string"
                  }
                },
                "required": [
                  "user_input"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Successful model response",
              "schema": {
                "properties": {
                  "cached_tokens": {
                    "description": "Number of cached tokens (if supported by model)",
                    "example": 0,
                    "type": "integer"
                  },
                  "completion_tokens": {
                    "description": "Number of tokens generated by the llm",
                    "example": 84,
                    "type": "integer"
                  },
                  "message": {
                    "example": "I'll help you with that question. Based on the information provided...",
                    "type": "string"
                  },
                  "model": {
                    "example": "gpt-4o-mini",
                    "type": "string"
                  },
                  "prompt_tokens": {
                    "description": "Number of tokens pass in the prompt",
                    "example": 125,
                    "type": "integer"
                  },
                  "response": {
                    "example": "200",
                    "type": "string"
                  },
                  "total_tokens": {
                    "description": "Total number of tokens used",
                    "example": 209,
                    "type": "integer"
                  },
                  "user_email": {
                    "example": "john.doe@example.com",
                    "type": "string"
                  },
                  "user_id": {
                    "example": "user123",
                    "type": "string"
                  },
                  "user_name": {
                    "example": "John Doe",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "message": {
                    "example": "Missing required fields: user_input",
                    "type": "string"
                  },
                  "response": {
                    "example": "400",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Token has expired",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "message": {
                    "example": "Internal server error occurred during API request",
                    "type": "string"
                  },
                  "response": {
                    "example": "500",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Consumes 0.5 AI credits per call",
          "tags": [
            "LLM"
          ]
        }
      },
      "/llm/llama": {
        "post": {
          "description": "<br/>Meta Llama 405B parameter LLM model for text generation and general task completion.<br/><br/>",
          "parameters": [
            {
              "description": "Authentication token",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "json_output": {
                    "default": false,
                    "description": "Whether to return the response in JSON format",
                    "type": "boolean"
                  },
                  "max_tokens": {
                    "default": 2048,
                    "description": "Maximum number of tokens to generate",
                    "type": "integer"
                  },
                  "system_prompt": {
                    "default": "You are a helpful AI assistant",
                    "description": "System prompt to control model behavior",
                    "type": "string"
                  },
                  "temperature": {
                    "default": 0.8,
                    "description": "Controls randomness (0=focused, 1=creative)",
                    "format": "float",
                    "maximum": 1,
                    "minimum": 0,
                    "type": "number"
                  },
                  "top_p": {
                    "default": 0.1,
                    "description": "Controls diversity via nucleus sampling",
                    "format": "float",
                    "maximum": 1,
                    "minimum": 0.1,
                    "type": "number"
                  },
                  "user_input": {
                    "description": "Text for the model to process",
                    "type": "string"
                  }
                },
                "required": [
                  "user_input"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Successful model response",
              "schema": {
                "properties": {
                  "cached_tokens": {
                    "description": "Number of cached tokens (if supported by model)",
                    "example": 0,
                    "type": "integer"
                  },
                  "completion_tokens": {
                    "description": "Number of tokens generated by the llm",
                    "example": 84,
                    "type": "integer"
                  },
                  "message": {
                    "example": "I'll help you with that question. Based on the information provided...",
                    "type": "string"
                  },
                  "model": {
                    "example": "llama-3-1-405b",
                    "type": "string"
                  },
                  "prompt_tokens": {
                    "description": "Number of tokens pass in the prompt",
                    "example": 125,
                    "type": "integer"
                  },
                  "response": {
                    "example": "200",
                    "type": "string"
                  },
                  "total_tokens": {
                    "description": "Total number of tokens used",
                    "example": 209,
                    "type": "integer"
                  },
                  "user_email": {
                    "example": "john.doe@example.com",
                    "type": "string"
                  },
                  "user_id": {
                    "example": "user123",
                    "type": "string"
                  },
                  "user_name": {
                    "example": "John Doe",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "message": {
                    "example": "Missing required fields: user_input",
                    "type": "string"
                  },
                  "response": {
                    "example": "400",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Token has expired",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "message": {
                    "example": "Internal server error occurred during API request",
                    "type": "string"
                  },
                  "response": {
                    "example": "500",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Consumes 3 AI credits per call",
          "tags": [
            "LLM"
          ]
        }
      },
      "/llm/o1-mini": {
        "post": {
          "description": "<br/>OpenAI LLM model for text generation on complex tasks that required chain of though and deep reasoning.<br/>",
          "parameters": [
            {
              "description": "Authentication token",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "system_prompt": {
                    "default": "You are a helpful AI assistant",
                    "description": "System prompt to control model behavior",
                    "type": "string"
                  },
                  "user_input": {
                    "description": "Text for the model to process",
                    "type": "string"
                  }
                },
                "required": [
                  "user_input"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Successful model response",
              "schema": {
                "properties": {
                  "cached_tokens": {
                    "description": "Number of cached tokens (if supported by model)",
                    "example": 0,
                    "type": "integer"
                  },
                  "completion_tokens": {
                    "description": "Number of tokens generated by the llm",
                    "example": 84,
                    "type": "integer"
                  },
                  "message": {
                    "example": "I'll help you with that question. Based on the information provided...",
                    "type": "string"
                  },
                  "model": {
                    "example": "o1-mini",
                    "type": "string"
                  },
                  "prompt_tokens": {
                    "description": "Number of tokens pass in the prompt",
                    "example": 125,
                    "type": "integer"
                  },
                  "response": {
                    "example": "200",
                    "type": "string"
                  },
                  "total_tokens": {
                    "description": "Total number of tokens used",
                    "example": 209,
                    "type": "integer"
                  },
                  "user_email": {
                    "example": "john.doe@example.com",
                    "type": "string"
                  },
                  "user_id": {
                    "example": "user123",
                    "type": "string"
                  },
                  "user_name": {
                    "example": "John Doe",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "message": {
                    "example": "Missing required fields: user_input",
                    "type": "string"
                  },
                  "response": {
                    "example": "400",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Token has expired",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "message": {
                    "example": "Internal server error occurred during API request",
                    "type": "string"
                  },
                  "response": {
                    "example": "500",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Consumes 5 AI credits per call",
          "tags": [
            "LLM"
          ]
        }
      },
      "/llm/o3-mini": {
        "post": {
          "description": "<br/>O3-Mini LLM model for text generation with variable reasoning effort.<br/><br/>",
          "parameters": [
            {
              "description": "Authentication token",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "json_output": {
                    "default": false,
                    "description": "Whether to return the response in JSON format",
                    "type": "boolean"
                  },
                  "max_completion_tokens": {
                    "default": 100000,
                    "description": "Maximum number of tokens in the response",
                    "maximum": 120000,
                    "minimum": 1,
                    "type": "integer"
                  },
                  "reasoning_effort": {
                    "default": "medium",
                    "description": "Level of reasoning effort",
                    "enum": [
                      "high",
                      "medium",
                      "low"
                    ],
                    "type": "string"
                  },
                  "system_prompt": {
                    "default": "You are a helpful AI assistant",
                    "description": "System prompt to control model behavior",
                    "type": "string"
                  },
                  "user_input": {
                    "description": "Text for the model to process",
                    "type": "string"
                  }
                },
                "required": [
                  "user_input"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Successful model response",
              "schema": {
                "properties": {
                  "cached_tokens": {
                    "description": "Number of cached tokens (if supported by model)",
                    "example": 0,
                    "type": "integer"
                  },
                  "completion_tokens": {
                    "description": "Number of tokens generated by the llm",
                    "example": 84,
                    "type": "integer"
                  },
                  "message": {
                    "example": "I'll help you with that question. Based on the information provided...",
                    "type": "string"
                  },
                  "model": {
                    "example": "o3-mini",
                    "type": "string"
                  },
                  "prompt_tokens": {
                    "description": "Number of tokens pass in the prompt",
                    "example": 125,
                    "type": "integer"
                  },
                  "response": {
                    "example": "200",
                    "type": "string"
                  },
                  "total_tokens": {
                    "description": "Total number of tokens used",
                    "example": 209,
                    "type": "integer"
                  },
                  "user_email": {
                    "example": "john.doe@example.com",
                    "type": "string"
                  },
                  "user_id": {
                    "example": "user123",
                    "type": "string"
                  },
                  "user_name": {
                    "example": "John Doe",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "message": {
                    "example": "Missing required fields: user_input",
                    "type": "string"
                  },
                  "response": {
                    "example": "400",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Token has expired",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "message": {
                    "example": "Internal server error occurred during API request",
                    "type": "string"
                  },
                  "response": {
                    "example": "500",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Consumes 3 AI credits per call",
          "tags": [
            "LLM"
          ]
        }
      },
      "/nlp/classify": {
        "post": {
          "description": "<br/>Classify text into one of the provided categories using NLP<br/>",
          "parameters": [
            {
              "description": "Authentication token",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "categories": {
                    "description": "List of categories to classify into",
                    "example": [
                      "sports",
                      "politics",
                      "technology",
                      "entertainment"
                    ],
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "model": {
                    "default": "gpt-4o-mini",
                    "description": "LLM model to use for classification",
                    "enum": [
                      "gpt-4o-mini",
                      "gpt-4o",
                      "deepseek-r1",
                      "deepseek-v3",
                      "o1-mini",
                      "o3-mini",
                      "llama-3-1-405b"
                    ],
                    "type": "string"
                  },
                  "user_input": {
                    "description": "Text to classify",
                    "type": "string"
                  }
                },
                "required": [
                  "categories",
                  "user_input"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Classification result",
              "schema": {
                "properties": {
                  "cached_tokens": {
                    "example": 0,
                    "type": "integer"
                  },
                  "completion_tokens": {
                    "example": 42,
                    "type": "integer"
                  },
                  "model_used": {
                    "example": "gpt-4o-mini",
                    "type": "string"
                  },
                  "prompt_tokens": {
                    "example": 125,
                    "type": "integer"
                  },
                  "result_class": {
                    "example": "sports",
                    "type": "string"
                  },
                  "total_tokens": {
                    "example": 167,
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing required fields: categories, user_input",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Token has expired",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "402": {
              "description": "Insufficient balance",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Insufficient Balance",
                    "type": "string"
                  },
                  "message": {
                    "example": "Your API call balance is depleted. Please upgrade your plan for additional calls.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Error processing classification request",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Consumes 0.5 AI credits per call when using gpt-4o-mini, 2 credits for gpt-4o",
          "tags": [
            "Natural Language Processing"
          ]
        }
      },
      "/nlp/classify/multi": {
        "post": {
          "description": "<br/>Classify text into multiple categories with confidence scores<br/>",
          "parameters": [
            {
              "description": "Authentication token",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "categories": {
                    "description": "List of categories to classify into",
                    "example": [
                      "sports",
                      "politics",
                      "technology",
                      "entertainment"
                    ],
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "model": {
                    "default": "gpt-4o-mini",
                    "description": "LLM model to use for classification",
                    "enum": [
                      "gpt-4o-mini",
                      "gpt-4o",
                      "deepseek-r1",
                      "deepseek-v3",
                      "o1-mini",
                      "o3-mini",
                      "llama-3-1-405b"
                    ],
                    "type": "string"
                  },
                  "user_input": {
                    "description": "Text to classify",
                    "type": "string"
                  }
                },
                "required": [
                  "categories",
                  "user_input"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Multiclass classification results",
              "schema": {
                "properties": {
                  "all_classes": {
                    "example": [
                      {
                        "category": "sports",
                        "confidence": 0.85
                      },
                      {
                        "category": "entertainment",
                        "confidence": 0.65
                      },
                      {
                        "category": "technology",
                        "confidence": 0.4
                      },
                      {
                        "category": "politics",
                        "confidence": 0.15
                      }
                    ],
                    "items": {
                      "properties": {
                        "category": {
                          "example": "sports",
                          "type": "string"
                        },
                        "confidence": {
                          "example": 0.85,
                          "format": "float",
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "cached_tokens": {
                    "example": 0,
                    "type": "integer"
                  },
                  "completion_tokens": {
                    "example": 42,
                    "type": "integer"
                  },
                  "model_used": {
                    "example": "gpt-4o-mini",
                    "type": "string"
                  },
                  "prompt_tokens": {
                    "example": 125,
                    "type": "integer"
                  },
                  "top_3_classes": {
                    "example": [
                      "sports",
                      "entertainment",
                      "technology"
                    ],
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "top_result": {
                    "example": "sports",
                    "type": "string"
                  },
                  "total_tokens": {
                    "example": 167,
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing required fields: categories, user_input",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Token has expired",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "402": {
              "description": "Insufficient balance",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Insufficient Balance",
                    "type": "string"
                  },
                  "message": {
                    "example": "Your API call balance is depleted. Please upgrade your plan for additional calls.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Error processing classification request",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Consumes 0.5 AI credits per call when using gpt-4o-mini, 2 credits for gpt-4o",
          "tags": [
            "Natural Language Processing"
          ]
        }
      },
      "/nlp/sentiment": {
        "post": {
          "description": "<br/>Classify text sentiment into positive, neutral, or negative categories<br/>",
          "parameters": [
            {
              "description": "Authentication token",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "model": {
                    "default": "gpt-4o-mini",
                    "description": "LLM model to use for sentiment analysis",
                    "enum": [
                      "gpt-4o-mini",
                      "gpt-4o",
                      "deepseek-r1",
                      "deepseek-v3",
                      "o1-mini",
                      "o3-mini",
                      "llama-3-1-405b"
                    ],
                    "type": "string"
                  },
                  "user_input": {
                    "description": "Text to analyze for sentiment",
                    "type": "string"
                  }
                },
                "required": [
                  "user_input"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Sentiment analysis result",
              "schema": {
                "properties": {
                  "all_sentiments": {
                    "example": [
                      {
                        "confidence": 0.85,
                        "sentiment": "positive"
                      },
                      {
                        "confidence": 0.12,
                        "sentiment": "neutral"
                      },
                      {
                        "confidence": 0.03,
                        "sentiment": "negative"
                      }
                    ],
                    "items": {
                      "properties": {
                        "confidence": {
                          "example": 0.85,
                          "format": "float",
                          "type": "number"
                        },
                        "sentiment": {
                          "example": "positive",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "cached_tokens": {
                    "example": 0,
                    "type": "integer"
                  },
                  "completion_tokens": {
                    "example": 42,
                    "type": "integer"
                  },
                  "model_used": {
                    "example": "gpt-4o-mini",
                    "type": "string"
                  },
                  "prompt_tokens": {
                    "example": 125,
                    "type": "integer"
                  },
                  "top_sentiment": {
                    "enum": [
                      "positive",
                      "neutral",
                      "negative"
                    ],
                    "example": "positive",
                    "type": "string"
                  },
                  "total_tokens": {
                    "example": 167,
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing required field: user_input",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Token has expired",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "402": {
              "description": "Insufficient balance",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Insufficient Balance",
                    "type": "string"
                  },
                  "message": {
                    "example": "Your API call balance is depleted. Please upgrade your plan for additional calls.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Error processing sentiment analysis request",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Consumes 0.5 AI credits per call when using gpt-4o-mini, 2 credits for gpt-4o",
          "tags": [
            "Natural Language Processing"
          ]
        }
      },
      "/nlp/sentiment/advanced": {
        "post": {
          "description": "<br/>Analyze text to identify multiple emotions with confidence scores<br/>",
          "parameters": [
            {
              "description": "Authentication token",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "model": {
                    "default": "gpt-4o-mini",
                    "description": "LLM model to use for advanced emotion analysis",
                    "enum": [
                      "gpt-4o-mini",
                      "gpt-4o",
                      "deepseek-r1",
                      "deepseek-v3",
                      "o1-mini",
                      "o3-mini",
                      "llama-3-1-405b"
                    ],
                    "type": "string"
                  },
                  "user_input": {
                    "description": "Text to analyze for emotions",
                    "type": "string"
                  }
                },
                "required": [
                  "user_input"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Advanced emotion analysis result",
              "schema": {
                "properties": {
                  "all_emotions": {
                    "example": [
                      {
                        "confidence": 0.85,
                        "emotion": "happiness"
                      },
                      {
                        "confidence": 0.65,
                        "emotion": "excitement"
                      },
                      {
                        "confidence": 0.4,
                        "emotion": "satisfaction"
                      },
                      {
                        "confidence": 0.05,
                        "emotion": "sadness"
                      }
                    ],
                    "items": {
                      "properties": {
                        "confidence": {
                          "example": 0.85,
                          "format": "float",
                          "type": "number"
                        },
                        "emotion": {
                          "example": "happiness",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "cached_tokens": {
                    "example": 0,
                    "type": "integer"
                  },
                  "completion_tokens": {
                    "example": 42,
                    "type": "integer"
                  },
                  "model_used": {
                    "example": "gpt-4o-mini",
                    "type": "string"
                  },
                  "prompt_tokens": {
                    "example": 125,
                    "type": "integer"
                  },
                  "top_3_emotions": {
                    "example": [
                      "happiness",
                      "excitement",
                      "satisfaction"
                    ],
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "top_emotion": {
                    "example": "happiness",
                    "type": "string"
                  },
                  "total_tokens": {
                    "example": 167,
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing required field: user_input",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Token has expired",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "402": {
              "description": "Insufficient balance",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Insufficient Balance",
                    "type": "string"
                  },
                  "message": {
                    "example": "Your API call balance is depleted. Please upgrade your plan for additional calls.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Error processing advanced emotion analysis request",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Consumes 0.5 AI credits per call when using gpt-4o-mini, 2 credits for gpt-4o",
          "tags": [
            "Natural Language Processing"
          ]
        }
      },
      "/ocr/sa_id_card": {
        "post": {
          "parameters": [
            {
              "description": "Valid token for authentication",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "file_id": {
                    "description": "ID of the previously uploaded file to process",
                    "type": "string"
                  }
                },
                "required": [
                  "file_id"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Successful OCR extraction",
              "schema": {
                "properties": {
                  "cached_tokens": {
                    "description": "Number of cached tokens (if available)",
                    "type": "integer"
                  },
                  "completion_tokens": {
                    "description": "Number of completion tokens consumed (if GPT was used)",
                    "type": "integer"
                  },
                  "country_of_birth": {
                    "description": "Country where ID holder was born",
                    "type": "string"
                  },
                  "date_of_birth": {
                    "description": "Birth date",
                    "type": "string"
                  },
                  "documents_processed": {
                    "description": "Number of documents processed",
                    "type": "integer"
                  },
                  "identity_number": {
                    "description": "South African ID number",
                    "type": "string"
                  },
                  "model_used": {
                    "description": "The LLM model used for processing (or \"none\" if barcode was used)",
                    "type": "string"
                  },
                  "names": {
                    "description": "Given names of the ID holder",
                    "type": "string"
                  },
                  "nationality": {
                    "description": "Nationality of the ID holder",
                    "type": "string"
                  },
                  "pages_processed": {
                    "description": "Number of pages processed",
                    "type": "integer"
                  },
                  "prompt_tokens": {
                    "description": "Number of prompt tokens consumed (if GPT was used)",
                    "type": "integer"
                  },
                  "sex": {
                    "description": "Gender of the ID holder",
                    "type": "string"
                  },
                  "surname": {
                    "description": "Last name of the ID holder",
                    "type": "string"
                  },
                  "total_tokens": {
                    "description": "Total number of tokens consumed (if GPT was used)",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "message": {
                    "examples": [
                      "Missing file_id parameter",
                      "Unsupported file type. Supported types: png, jpg, jpeg, pdf, tiff, tif",
                      "File ID not found",
                      "File too large for processing"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "examples": [
                      "Missing X-Token header",
                      "Invalid token",
                      "Token has expired"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "examples": [
                      "Error processing file",
                      "Error downloading file",
                      "Document intelligence service unavailable",
                      "Error extracting document content"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Perform OCR on South African ID documents",
          "tags": [
            "OCR"
          ]
        }
      },
      "/ocr/vehicle_license_disc": {
        "post": {
          "parameters": [
            {
              "description": "Valid token for authentication",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "file_id": {
                    "description": "ID of the previously uploaded file to process",
                    "type": "string"
                  }
                },
                "required": [
                  "file_id"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Successful OCR extraction",
              "schema": {
                "properties": {
                  "cached_tokens": {
                    "description": "Number of cached tokens (if available)",
                    "type": "integer"
                  },
                  "completion_tokens": {
                    "description": "Number of completion tokens consumed (if GPT was used)",
                    "type": "integer"
                  },
                  "documents_processed": {
                    "description": "Number of documents processed",
                    "type": "integer"
                  },
                  "extraction_method": {
                    "description": "Method used to extract the data (barcode analysis or image ocr)",
                    "type": "string"
                  },
                  "model_used": {
                    "description": "The LLM model used for processing (or \"none\" if barcode was used)",
                    "type": "string"
                  },
                  "pages_processed": {
                    "description": "Number of pages processed",
                    "type": "integer"
                  },
                  "prompt_tokens": {
                    "description": "Number of prompt tokens consumed (if GPT was used)",
                    "type": "integer"
                  },
                  "total_tokens": {
                    "description": "Total number of tokens consumed (if GPT was used)",
                    "type": "integer"
                  },
                  "veh_color": {
                    "description": "Vehicle color",
                    "type": "string"
                  },
                  "veh_description": {
                    "description": "Vehicle model and details",
                    "type": "string"
                  },
                  "veh_engine_no": {
                    "description": "Unique engine number",
                    "type": "string"
                  },
                  "veh_expiry": {
                    "description": "License expiry date",
                    "type": "string"
                  },
                  "veh_make": {
                    "description": "Vehicle manufacturer",
                    "type": "string"
                  },
                  "veh_model": {
                    "description": "Vehicle model",
                    "type": "string"
                  },
                  "veh_no": {
                    "description": "RSA identification number",
                    "type": "string"
                  },
                  "veh_reg_no": {
                    "description": "Vehicle license number",
                    "type": "string"
                  },
                  "veh_register_no": {
                    "description": "Vehicle registration number",
                    "type": "string"
                  },
                  "veh_vin_no": {
                    "description": "Vehicle Identification Number",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "message": {
                    "examples": [
                      "Missing file_id parameter",
                      "Unsupported file type. Supported types: png, jpg, jpeg, pdf, tiff, tif",
                      "File ID not found",
                      "File too large for processing"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "examples": [
                      "Missing X-Token header",
                      "Invalid token",
                      "Token has expired"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "examples": [
                      "Error processing file",
                      "Error downloading file",
                      "Document intelligence service unavailable",
                      "Error extracting document content"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Perform OCR on South African vehicle license discs",
          "tags": [
            "OCR"
          ]
        }
      },
      "/rag/vectorstore": {
        "delete": {
          "parameters": [
            {
              "description": "Authentication token",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "description": "ID of the vectorstore to delete",
              "in": "query",
              "name": "vectorstore_id",
              "required": true,
              "type": "string"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Vectorstore deleted successfully",
              "schema": {
                "properties": {
                  "message": {
                    "example": "Vectorstore deleted successfully",
                    "type": "string"
                  },
                  "name": {
                    "example": "My Vectorstore",
                    "type": "string"
                  },
                  "vectorstore_id": {
                    "example": "12345678-1234-1234-1234-123456789012",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing required parameter: vectorstore_id",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Token has expired",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Forbidden",
                    "type": "string"
                  },
                  "message": {
                    "example": "You don't have permission to delete this vectorstore",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Not Found",
                    "type": "string"
                  },
                  "message": {
                    "example": "Vectorstore not found",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Error deleting vectorstore",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Delete a FAISS vectorstore",
          "tags": [
            "RAG"
          ]
        }
      },
      "/rag/vectorstore/consume": {
        "post": {
          "parameters": [
            {
              "description": "Authentication token",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "include_sources": {
                    "default": false,
                    "description": "Whether to include source documents in the response",
                    "type": "boolean"
                  },
                  "model": {
                    "default": "gpt-4o-mini",
                    "description": "LLM model to use for generating the answer",
                    "enum": [
                      "gpt-4o-mini",
                      "gpt-4o"
                    ],
                    "type": "string"
                  },
                  "query": {
                    "description": "User query to answer using the vectorstore",
                    "type": "string"
                  },
                  "system_prompt": {
                    "description": "Custom system prompt to guide model behavior (optional)",
                    "type": "string"
                  },
                  "temperature": {
                    "default": 0.5,
                    "description": "Controls randomness (0=focused, 1=creative)",
                    "format": "float",
                    "maximum": 1,
                    "minimum": 0,
                    "type": "number"
                  },
                  "vectorstore_id": {
                    "description": "ID of the vectorstore to use",
                    "type": "string"
                  }
                },
                "required": [
                  "vectorstore_id",
                  "query"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Query answered successfully",
              "schema": {
                "properties": {
                  "answer": {
                    "example": "Based on the context, the answer to your question is...",
                    "type": "string"
                  },
                  "completion_tokens": {
                    "example": 84,
                    "type": "integer"
                  },
                  "input_tokens": {
                    "example": 125,
                    "type": "integer"
                  },
                  "message": {
                    "example": "Query processed successfully",
                    "type": "string"
                  },
                  "model": {
                    "example": "gpt-4o-mini",
                    "type": "string"
                  },
                  "output_tokens": {
                    "example": 209,
                    "type": "integer"
                  },
                  "sources": {
                    "description": "Source documents used for the answer (only included if include_sources is true)",
                    "example": [
                      "document1.pdf",
                      "document2.docx"
                    ],
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "vectorstore_id": {
                    "example": "12345678-1234-1234-1234-123456789012",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing required field: vectorstore_id or query",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Token has expired",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Forbidden",
                    "type": "string"
                  },
                  "message": {
                    "example": "You don't have permission to access this vectorstore",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Not Found",
                    "type": "string"
                  },
                  "message": {
                    "example": "Vectorstore not found",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Error processing query",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Consume a vectorstore with a query - RAG-based conversational assistant",
          "tags": [
            "RAG"
          ]
        }
      },
      "/rag/vectorstore/consume/git_policies": {
        "post": {
          "parameters": [
            {
              "description": "Authentication token",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "include_sources": {
                    "default": false,
                    "description": "Whether to include source documents in the response",
                    "type": "boolean"
                  },
                  "query": {
                    "description": "User query to answer using the git policies vectorstore",
                    "type": "string"
                  },
                  "system_prompt": {
                    "description": "Custom system prompt to guide model behavior (optional)",
                    "type": "string"
                  }
                },
                "required": [
                  "query"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Query answered successfully",
              "schema": {
                "properties": {
                  "answer": {
                    "example": "Based on the context, the answer to your question is...",
                    "type": "string"
                  },
                  "completion_tokens": {
                    "example": 84,
                    "type": "integer"
                  },
                  "input_tokens": {
                    "example": 125,
                    "type": "integer"
                  },
                  "message": {
                    "example": "Query processed successfully",
                    "type": "string"
                  },
                  "model": {
                    "example": "gpt-4o",
                    "type": "string"
                  },
                  "output_tokens": {
                    "example": 209,
                    "type": "integer"
                  },
                  "sources": {
                    "description": "Source documents used for the answer (only included if include_sources is true)",
                    "example": [
                      "document1.pdf",
                      "document2.docx"
                    ],
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "vectorstore_id": {
                    "example": "abc123456789",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing required field: query",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error"
            },
            "403": {
              "description": "Forbidden"
            },
            "404": {
              "description": "Not found"
            },
            "500": {
              "description": "Server error"
            }
          },
          "summary": "Consume the Git policies vectorstore with a query - RAG-based conversational assistant",
          "tags": [
            "RAG"
          ]
        }
      },
      "/rag/vectorstore/document": {
        "post": {
          "parameters": [
            {
              "description": "Authentication token",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "chunk_overlap": {
                    "default": 200,
                    "description": "Overlap between chunks",
                    "type": "integer"
                  },
                  "chunk_size": {
                    "default": 1000,
                    "description": "Size of text chunks for splitting documents",
                    "type": "integer"
                  },
                  "file_ids": {
                    "description": "Array of file IDs to process (uploaded via /file endpoint)",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "vectorstore_name": {
                    "description": "Optional name for the vectorstore",
                    "type": "string"
                  }
                },
                "required": [
                  "file_ids"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Vectorstore created successfully",
              "schema": {
                "properties": {
                  "chunk_count": {
                    "example": 120,
                    "type": "integer"
                  },
                  "document_count": {
                    "example": 42,
                    "type": "integer"
                  },
                  "embedded_tokens": {
                    "example": 65000,
                    "type": "integer"
                  },
                  "embedding_model": {
                    "example": "text-embedding-3-large",
                    "type": "string"
                  },
                  "file_count": {
                    "example": 3,
                    "type": "integer"
                  },
                  "files_uploaded": {
                    "example": 3,
                    "type": "integer"
                  },
                  "message": {
                    "example": "Vectorstore created successfully",
                    "type": "string"
                  },
                  "name": {
                    "example": "My Vectorstore",
                    "type": "string"
                  },
                  "path": {
                    "example": "user123-12345678-1234-1234-1234-123456789012",
                    "type": "string"
                  },
                  "vectorstore_id": {
                    "example": "12345678-1234-1234-1234-123456789012",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing required field: file_ids",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Token has expired",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Not Found",
                    "type": "string"
                  },
                  "message": {
                    "example": "File not found",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Error creating vectorstore",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Create a FAISS vectorstore from files",
          "tags": [
            "RAG"
          ]
        }
      },
      "/rag/vectorstore/document/advanced": {
        "post": {
          "parameters": [
            {
              "description": "Authentication token",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "batch_size": {
                    "default": 50,
                    "description": "Number of documents to process in each batch",
                    "type": "integer"
                  },
                  "chunk_overlap": {
                    "default": 200,
                    "description": "Overlap between chunks",
                    "type": "integer"
                  },
                  "chunk_size": {
                    "default": 3000,
                    "description": "Size of text chunks for splitting documents",
                    "type": "integer"
                  },
                  "file_ids": {
                    "description": "Array of file IDs to process (uploaded via /file endpoint)",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "max_retries": {
                    "default": 3,
                    "description": "Maximum number of retries for batch processing",
                    "type": "integer"
                  },
                  "vectorstore_name": {
                    "description": "Optional name for the vectorstore",
                    "type": "string"
                  }
                },
                "required": [
                  "file_ids"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Advanced vectorstore created successfully",
              "schema": {
                "properties": {
                  "chunk_count": {
                    "example": 250,
                    "type": "integer"
                  },
                  "document_count": {
                    "example": 98,
                    "type": "integer"
                  },
                  "embedded_tokens": {
                    "example": 125000,
                    "type": "integer"
                  },
                  "embedding_model": {
                    "example": "text-embedding-3-large",
                    "type": "string"
                  },
                  "file_count": {
                    "example": 5,
                    "type": "integer"
                  },
                  "files_uploaded": {
                    "example": 5,
                    "type": "integer"
                  },
                  "message": {
                    "example": "Advanced vectorstore created successfully",
                    "type": "string"
                  },
                  "name": {
                    "example": "My Advanced Vectorstore",
                    "type": "string"
                  },
                  "path": {
                    "example": "user123-12345678-1234-1234-1234-123456789012",
                    "type": "string"
                  },
                  "processing_stats": {
                    "properties": {
                      "duplicates_removed": {
                        "example": 12,
                        "type": "integer"
                      },
                      "end_time": {
                        "example": 1678543289.123,
                        "type": "number"
                      },
                      "processed_files": {
                        "example": 5,
                        "type": "integer"
                      },
                      "processing_time_seconds": {
                        "example": 78.667,
                        "type": "number"
                      },
                      "start_time": {
                        "example": 1678543210.456,
                        "type": "number"
                      },
                      "total_chunks": {
                        "example": 250,
                        "type": "integer"
                      },
                      "total_documents": {
                        "example": 98,
                        "type": "integer"
                      },
                      "total_files": {
                        "example": 5,
                        "type": "integer"
                      },
                      "total_pages": {
                        "example": 35,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "vectorstore_id": {
                    "example": "12345678-1234-1234-1234-123456789012",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing required field: file_ids",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Token has expired",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Not Found",
                    "type": "string"
                  },
                  "message": {
                    "example": "File not found",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Error creating advanced vectorstore",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Create an advanced FAISS vectorstore from files with enhanced processing",
          "tags": [
            "RAG"
          ]
        }
      },
      "/rag/vectorstore/list": {
        "get": {
          "parameters": [
            {
              "description": "Authentication token",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Vectorstores list retrieved successfully",
              "schema": {
                "properties": {
                  "count": {
                    "example": 3,
                    "type": "integer"
                  },
                  "message": {
                    "example": "Vectorstores retrieved successfully",
                    "type": "string"
                  },
                  "vectorstores": {
                    "items": {
                      "properties": {
                        "chunk_count": {
                          "example": 120,
                          "type": "integer"
                        },
                        "created_at": {
                          "example": "2023-06-01T10:30:45.123456+02:00",
                          "format": "date-time",
                          "type": "string"
                        },
                        "document_count": {
                          "example": 42,
                          "type": "integer"
                        },
                        "file_count": {
                          "example": 3,
                          "type": "integer"
                        },
                        "id": {
                          "example": "12345678-1234-1234-1234-123456789012",
                          "type": "string"
                        },
                        "last_accessed": {
                          "example": "2023-06-02T14:22:33.123456+02:00",
                          "format": "date-time",
                          "type": "string"
                        },
                        "name": {
                          "example": "My Vectorstore",
                          "type": "string"
                        },
                        "owner_id": {
                          "example": "98765432-9876-9876-9876-987654321098",
                          "type": "string"
                        },
                        "path": {
                          "example": "user123-12345678-1234-1234-1234-123456789012",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Token has expired",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Error retrieving vectorstores",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "List all vectorstores available to the user",
          "tags": [
            "RAG"
          ]
        }
      },
      "/rag/vectorstore/load": {
        "post": {
          "parameters": [
            {
              "description": "Authentication token",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "vectorstore_id": {
                    "description": "ID of the vectorstore to load",
                    "type": "string"
                  }
                },
                "required": [
                  "vectorstore_id"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Vectorstore information retrieved successfully",
              "schema": {
                "properties": {
                  "chunk_count": {
                    "example": 120,
                    "type": "integer"
                  },
                  "created_at": {
                    "example": "2023-06-01T10:30:45.123456+02:00",
                    "format": "date-time",
                    "type": "string"
                  },
                  "document_count": {
                    "example": 42,
                    "type": "integer"
                  },
                  "embedding_model": {
                    "example": "text-embedding-3-large",
                    "type": "string"
                  },
                  "file_count": {
                    "example": 3,
                    "type": "integer"
                  },
                  "last_accessed": {
                    "example": "2023-06-02T14:22:33.123456+02:00",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "example": "Vectorstore loaded successfully",
                    "type": "string"
                  },
                  "name": {
                    "example": "My Vectorstore",
                    "type": "string"
                  },
                  "path": {
                    "example": "user123-12345678-1234-1234-1234-123456789012",
                    "type": "string"
                  },
                  "vectorstore_id": {
                    "example": "12345678-1234-1234-1234-123456789012",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing required field: vectorstore_id",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Token has expired",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Forbidden",
                    "type": "string"
                  },
                  "message": {
                    "example": "You don't have permission to access this vectorstore",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Not Found",
                    "type": "string"
                  },
                  "message": {
                    "example": "Vectorstore not found",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Error loading vectorstore",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Load a FAISS vectorstore and return its metadata",
          "tags": [
            "RAG"
          ]
        }
      },
      "/rag/vectorstore/string": {
        "post": {
          "parameters": [
            {
              "description": "Authentication token",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "chunk_overlap": {
                    "default": 100,
                    "description": "Overlap between chunks",
                    "type": "integer"
                  },
                  "chunk_size": {
                    "default": 500,
                    "description": "Size of text chunks for splitting documents (smaller default for strings)",
                    "type": "integer"
                  },
                  "content": {
                    "description": "Text content to create vectorstore from",
                    "type": "string"
                  },
                  "content_source": {
                    "default": "User Input",
                    "description": "Source identifier for the content (e.g. \"API Response\", \"Manual Input\")",
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Additional metadata to store with the content",
                    "type": "object"
                  },
                  "vectorstore_name": {
                    "description": "Optional name for the vectorstore",
                    "type": "string"
                  }
                },
                "required": [
                  "content"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Vectorstore created successfully",
              "schema": {
                "properties": {
                  "chunk_count": {
                    "example": 12,
                    "type": "integer"
                  },
                  "content_length": {
                    "example": 5000,
                    "type": "integer"
                  },
                  "content_source": {
                    "example": "User Input",
                    "type": "string"
                  },
                  "embedded_tokens": {
                    "example": 1200,
                    "type": "integer"
                  },
                  "embedding_model": {
                    "example": "text-embedding-3-large",
                    "type": "string"
                  },
                  "message": {
                    "example": "Vectorstore created successfully from string content",
                    "type": "string"
                  },
                  "name": {
                    "example": "My String Vectorstore",
                    "type": "string"
                  },
                  "path": {
                    "example": "user123-12345678-1234-1234-1234-123456789012",
                    "type": "string"
                  },
                  "vectorstore_id": {
                    "example": "12345678-1234-1234-1234-123456789012",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing required field: content",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Token has expired",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Error creating vectorstore",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Create a FAISS vectorstore directly from a text string",
          "tags": [
            "RAG"
          ]
        }
      },
      "/speech/stt": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "description": "Valid token for authentication",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "file_id": {
                    "description": "ID of the uploaded audio file",
                    "type": "string"
                  }
                },
                "required": [
                  "file_id"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Audio transcribed successfully",
              "schema": {
                "properties": {
                  "message": {
                    "example": "Audio transcribed successfully",
                    "type": "string"
                  },
                  "seconds_processed": {
                    "description": "Duration of the processed audio in seconds",
                    "type": "number"
                  },
                  "transcript": {
                    "description": "Transcript text",
                    "type": "string"
                  },
                  "transcription_details": {
                    "description": "Full details of the transcription results",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request"
            },
            "401": {
              "description": "Authentication error"
            },
            "404": {
              "description": "File not found"
            },
            "500": {
              "description": "Server error"
            }
          },
          "summary": "Convert speech to text using Microsoft Speech to Text API",
          "tags": [
            "Speech Services"
          ]
        }
      },
      "/speech/stt_diarize": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "description": "for speaker diarization and timestamps<br/>",
          "parameters": [
            {
              "description": "Valid token for authentication",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "properties": {
                  "file_id": {
                    "description": "ID of the uploaded audio file",
                    "type": "string"
                  }
                },
                "required": [
                  "file_id"
                ],
                "type": "object"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Audio transcribed and enhanced successfully",
              "schema": {
                "properties": {
                  "enhanced_transcript": {
                    "description": "Enhanced transcript with speaker diarization and timestamps",
                    "type": "string"
                  },
                  "message": {
                    "example": "Audio processed successfully",
                    "type": "string"
                  },
                  "raw_transcript": {
                    "description": "Original transcript text",
                    "type": "string"
                  },
                  "seconds_processed": {
                    "description": "Duration of the processed audio in seconds",
                    "type": "number"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request"
            },
            "401": {
              "description": "Authentication error"
            },
            "404": {
              "description": "File not found"
            },
            "500": {
              "description": "Server error"
            }
          },
          "summary": "Convert speech to text using Microsoft Speech to Text API and enhance with GPT-4o-mini",
          "tags": [
            "Speech Services"
          ]
        }
      },
      "/token": {
        "get": {
          "parameters": [
            {
              "description": "API Key for authentication",
              "in": "header",
              "name": "API-Key",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Token generated successfully",
              "schema": {
                "properties": {
                  "access_token": {
                    "description": "generated access token to use with api calls",
                    "type": "string"
                  },
                  "expires_in": {
                    "description": "Time in seconds until token expiration",
                    "format": "seconds",
                    "type": "integer"
                  },
                  "expires_on": {
                    "description": "Token expiration timestamp",
                    "format": "date-time",
                    "type": "string"
                  },
                  "token_type": {
                    "description": "Type of token generated",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing API Key header (API-Key) or Invalid API Key",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Error generating token",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Generate a token for API access using a valid api authentication key.",
          "tags": [
            "Token Service"
          ]
        }
      },
      "/token/details": {
        "get": {
          "parameters": [
            {
              "description": "API Key for authentication",
              "in": "header",
              "name": "API-Key",
              "required": true,
              "type": "string"
            },
            {
              "description": "The token to validate and get details for",
              "in": "query",
              "name": "token",
              "required": true,
              "type": "string"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Token details retrieved successfully",
              "schema": {
                "properties": {
                  "token_expiration_time": {
                    "description": "Token expiration timestamp",
                    "example": "yyyy-mm-ddd hh:mm:ss SAST+0200",
                    "format": "date-time",
                    "type": "string"
                  },
                  "token_scope": {
                    "description": "Scope of the token",
                    "example": "0,1,2,3,4,5",
                    "type": "string"
                  },
                  "token_status": {
                    "description": "Current status of the token",
                    "enum": [
                      "valid",
                      "invalid",
                      "expired"
                    ],
                    "example": "valid",
                    "type": "string"
                  },
                  "user_id": {
                    "description": "ID of the user who issued the token",
                    "example": "12345678-1234-1234-1234-123456789012",
                    "type": "string"
                  }
                },
                "required": [
                  "token_status",
                  "user_id",
                  "token_scope",
                  "token_expiration_time"
                ],
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing API Key header (API-Key) or Invalid API Key",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "404": {
              "description": "Token not found",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Not Found",
                    "type": "string"
                  },
                  "message": {
                    "example": "Token details not found",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Error retrieving token details",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Retrieve details for a specific token after validating the API key.",
          "tags": [
            "Token Service"
          ]
        }
      },
      "/token/refresh": {
        "get": {
          "parameters": [
            {
              "description": "API Key for authentication",
              "in": "header",
              "name": "API-Key",
              "required": true,
              "type": "string"
            },
            {
              "description": "The token to refresh",
              "in": "query",
              "name": "token",
              "required": true,
              "type": "string"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Token refreshed successfully",
              "schema": {
                "properties": {
                  "access_token": {
                    "description": "The new refreshed token",
                    "type": "string"
                  },
                  "expires_in": {
                    "description": "Time in seconds until token expiration",
                    "format": "seconds",
                    "type": "integer"
                  },
                  "expires_on": {
                    "description": "Token expiration timestamp",
                    "format": "date-time",
                    "type": "string"
                  },
                  "token_type": {
                    "description": "Type of token generated",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing token parameter or Invalid token format",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing API Key header (API-Key) or Invalid API Key",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Error refreshing token",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Refresh an existing token to extend its expiration time",
          "tags": [
            "Token Service"
          ]
        }
      },
      "/usage/activity": {
        "get": {
          "parameters": [
            {
              "description": "Valid token for authentication",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "description": "Time period for activity summary in format \"YYYY-MM\"",
              "example": "2025-04",
              "in": "query",
              "name": "time_period",
              "required": true,
              "type": "string"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "User activity summary retrieved successfully"
            },
            "400": {
              "description": "Bad request"
            },
            "401": {
              "description": "Authentication error"
            },
            "500": {
              "description": "Server error"
            }
          },
          "summary": "Get detailed activity summary for a user for a specific calendar month",
          "tags": [
            "Balance Management"
          ]
        }
      },
      "/usage/balance": {
        "get": {
          "parameters": [
            {
              "description": "API Key for authentication",
              "in": "header",
              "name": "API-Key",
              "required": true,
              "type": "string"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Current balance retrieved successfully"
            },
            "401": {
              "description": "Authentication error"
            },
            "500": {
              "description": "Server error"
            }
          },
          "summary": "Check current API call balance for authenticated user",
          "tags": [
            "Balance Management"
          ]
        }
      },
      "/usage/department": {
        "get": {
          "parameters": [
            {
              "description": "Valid token for authentication",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "description": "Department to get statistics for",
              "in": "query",
              "name": "department",
              "required": true,
              "type": "string"
            },
            {
              "description": "Time period for statistics, either \"all\" or in format \"YYYY-MM\"",
              "example": "2024-03",
              "in": "query",
              "name": "time_period",
              "required": true,
              "type": "string"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Department usage statistics retrieved successfully",
              "schema": {
                "properties": {
                  "active_users": {
                    "description": "Number of active users in the department",
                    "type": "integer"
                  },
                  "company": {
                    "description": "Company name",
                    "type": "string"
                  },
                  "credits_consumed": {
                    "description": "Total credits consumed by the department",
                    "format": "float",
                    "type": "number"
                  },
                  "department": {
                    "description": "Department name",
                    "type": "string"
                  },
                  "tokens_generated": {
                    "description": "Total number of tokens generated by the department",
                    "type": "integer"
                  },
                  "user_consumption": {
                    "items": {
                      "properties": {
                        "credits_consumed": {
                          "description": "Credits consumed by this user",
                          "format": "float",
                          "type": "number"
                        },
                        "endpoints_used": {
                          "items": {
                            "properties": {
                              "average_response_time": {
                                "description": "Average response time in milliseconds",
                                "format": "float",
                                "type": "number"
                              },
                              "credits_consumed": {
                                "description": "Credits consumed by this endpoint",
                                "format": "float",
                                "type": "number"
                              },
                              "endpoint_id": {
                                "description": "ID of the endpoint",
                                "type": "string"
                              },
                              "endpoint_name": {
                                "description": "Name of the endpoint",
                                "type": "string"
                              },
                              "number_calls": {
                                "description": "Total number of calls",
                                "type": "integer"
                              },
                              "number_failed_calls": {
                                "description": "Number of failed calls",
                                "type": "integer"
                              },
                              "number_successful_calls": {
                                "description": "Number of successful calls",
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "user": {
                          "description": "User name",
                          "type": "string"
                        },
                        "user_id": {
                          "description": "User ID",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing required fields or Invalid time period format",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing X-Token header or Invalid token",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Forbidden",
                    "type": "string"
                  },
                  "message": {
                    "example": "You can only view statistics for your own department",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Not Found",
                    "type": "string"
                  },
                  "message": {
                    "example": "Department not found or has no users",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Error retrieving department statistics",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Get usage statistics for a department",
          "tags": [
            "Balance Management"
          ]
        }
      },
      "/usage/models": {
        "get": {
          "parameters": [
            {
              "description": "Valid token for authentication",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "description": "Time period for model usage summary in format \"YYYY-MM\"",
              "example": "2025-04",
              "in": "query",
              "name": "time_period",
              "required": true,
              "type": "string"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "User model usage summary retrieved successfully"
            },
            "400": {
              "description": "Bad request"
            },
            "401": {
              "description": "Authentication error"
            },
            "500": {
              "description": "Server error"
            }
          },
          "summary": "Get detailed model usage statistics for a user for a specific calendar month",
          "tags": [
            "Balance Management"
          ]
        }
      },
      "/usage/user": {
        "get": {
          "parameters": [
            {
              "description": "Valid token for authentication",
              "in": "header",
              "name": "X-Token",
              "required": true,
              "type": "string"
            },
            {
              "description": "ID of the user to get statistics for",
              "in": "query",
              "name": "user_id",
              "required": true,
              "type": "string"
            },
            {
              "description": "Time period for statistics, either \"all\" or in format \"YYYY-MM\"",
              "example": "2024-03",
              "in": "query",
              "name": "time_period",
              "required": true,
              "type": "string"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Usage statistics retrieved successfully",
              "schema": {
                "properties": {
                  "company": {
                    "description": "Company name of the user",
                    "type": "string"
                  },
                  "credits_consumed": {
                    "description": "Total credits consumed",
                    "format": "float",
                    "type": "number"
                  },
                  "department": {
                    "description": "Department of the user",
                    "type": "string"
                  },
                  "endpoints_used": {
                    "items": {
                      "properties": {
                        "average_response_time": {
                          "description": "Average response time in milliseconds",
                          "format": "float",
                          "type": "number"
                        },
                        "credits_consumed": {
                          "description": "Credits consumed by this endpoint",
                          "format": "float",
                          "type": "number"
                        },
                        "endpoint_id": {
                          "description": "ID of the endpoint",
                          "type": "string"
                        },
                        "endpoint_name": {
                          "description": "Name of the endpoint",
                          "type": "string"
                        },
                        "number_calls": {
                          "description": "Total number of calls",
                          "type": "integer"
                        },
                        "number_failed_calls": {
                          "description": "Number of failed calls",
                          "type": "integer"
                        },
                        "number_successful_calls": {
                          "description": "Number of successful calls",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "name": {
                    "description": "Common name of the user",
                    "type": "string"
                  },
                  "tokens_generated": {
                    "description": "Number of tokens generated",
                    "type": "integer"
                  },
                  "user_id": {
                    "description": "ID of the user",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing required fields or Invalid time period format",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Authentication Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Missing X-Token header or Invalid token",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Forbidden",
                    "type": "string"
                  },
                  "message": {
                    "example": "You can only view your own usage statistics",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "500": {
              "description": "Server error",
              "schema": {
                "properties": {
                  "error": {
                    "example": "Server Error",
                    "type": "string"
                  },
                  "message": {
                    "example": "Error retrieving usage statistics",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "summary": "Get usage statistics for a specific user",
          "tags": [
            "Balance Management"
          ]
        }
      }
    },
    "securityDefinitions": {
      "ApiKeyAuth": {
        "description": "API Key for authentication. Add your token with the X-Token header.",
        "in": "header",
        "name": "X-Token",
        "type": "apiKey"
      }
    },
    "swagger": "2.0"
  }